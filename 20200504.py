#5
print(hex(234))

print(int(hex(234), 16))

#6
print(list(map(lambda x : x*3,[1,2,3,4])))

#7
alist = [-8, 2, 7, 5, -3, 5, 0, 1]
print(max(alist) + min(alist))

#8 소수점 4자리까지만 반올림하여 표시
print(round(17/3, 4))

#9
#C:\javaTest>20200504.py 1 2 3 4 5 6 7 8 9 10
import sys
result=0
args = sys.argv[1:]
for i in args:
    result = result + int(i)

#print(result)

#10
import os
#os.system("dir")
#f = os.popen("20200504.py")
#print(f.read())
#f.close()

#shutil 파일을 복사해줌
import shutil

#shutil.copy("src.txt", "")
#glob 특정 디렉터리에 있는 파일들 알려줌
#11
import glob
#print(glob.glob("C:\\javaTest\\*.py"))

#12
import time
print(time.strftime('%x', time.localtime(time.time())))

#13 중복제거하고 난수뽑기
import random

i=0
array =[]
while(i<5):
    number=0
    number = random.randint(1,45)
    
    if number in array:
        continue
    else:
        array.append(number)
        i += 1
        print(i)
print(array)

#3과 5의 배수 합 구하기
result = 0
for n in range(1, 1000):
    if n % 3 == 0 or n % 5 == 0: 
        result += n
print(result)


#페이징 게시물의 총 건수(m), 한 페이지에 보여줄 게시물 수(n), 출력하는 값= 총 페이지 수
def getTotalPage(m,n):
    if m%n == 0:
        return m//n
    else:
        return m//n + 1

print(getTotalPage(100,10))


#피보나치수열
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
# 400만이하인 짝수 모두 더하기해

i=0
arr = [1, 2]
num=0
sum1 =2
while num<=4000000:
    num = arr[i]+arr[i+1] 
    arr.append(num)
    if num%2==0:
        sum1 += num
        print(sum1)
    i += 1
#오늘 5월 6일 
#최대공약수 구하기+ 소인수분해
print("++++++++")
n=1
#while True:
#    if n==600851475143 :
#        False
#    else:
#        if 600851475143 %n == 0:
#            num=0
#            for i in range(1,n+1):
#                if n%i==0:
#                    num +=1
#            if num <=2:
#                print(n)    
#    n += 1

# Largest palindrome product 거꾸로하건 앞으로하건 같은 수
arr = []
for i in range(100, 1000):
    for j in range(100, 1000):
        num = i * j
        solve = str(num)
        if solve == solve[::-1]:
            #print(i, " * ",j, " = ",num)
            arr.append(num)
#print(max(arr))
#smallest multiple 최소공배수
n=1
s=0
#while True:
#    s=0
#    for i in range(1,21):
#        if n%i==0:
#            s +=1            
#        else:
#            break
#    if(s==20):
#        print(n)
#        break
#    else:
#        n +=1

#최소공배수는 두수를 곱해서 최대공약수로 나누어주면 됨
#여러숫자의 최소공배수일떄는 두수씩 순차적으로 계산
import math
print(math.gcd(12,18)) # 최대공약수 구하는 함수

#최대공약수로 계산
def get_gcd(num1,num2):
    i=1
    while i<=num2:
        if num1%i and num2%i==0:
            gcd = i
        i+=1
    return gcd

#print(get_gcd(1,20))

num=1
for i in range(1,21):
    num = num*i
print(num)